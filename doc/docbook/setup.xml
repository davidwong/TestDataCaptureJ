<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
  <title>TestDataCaptureJ: Installation and Application Setup</title>

  <section>
    <title>Prerequisite software</title>
    
    <para>The following prerequisite software is required, has only been tested in a Windows environment.</para>
    
    <itemizedlist>
      <listitem>
        <para>Eclipse Java IDE (Juno 4.2) <link xlink:href="http://www.eclipse.org"
            >http://www.eclipse.org</link></para>
      </listitem>
      
      <listitem>
        <para>AJDT, the AspectJ plugin for Eclipse
          <link xlink:href="http://www.eclipse.org/ajdt">http://www.eclipse.org/ajdt</link></para>
      </listitem>
      
      <listitem>
        <para>AspectJ (i.e. the version that matches the AspectJ version from the ADJT plugin that
          you are using) <link xlink:href="http://www.eclipse.org/aspectj"
            >http://www.eclipse.org/aspectj</link></para>
      </listitem>
      
      <listitem>
        <para>Dependency utility jars: <itemizedlist>
            <listitem>
              <para>Apache commons-collections</para>
            </listitem>
            <listitem>
              <para>Apache commons-configuration</para>
            </listitem>
            <listitem>
              <para>Apache commons-lang</para>
            </listitem>
            <listitem>
              <para>Apache commons-logging</para>
            </listitem>
          </itemizedlist></para>
      </listitem>

      <listitem>
        <para>Logging framework jars: <itemizedlist>
          <listitem>
            <para>LogBack</para>
            <remark>The use of Log4j is deprecated for the project, but can still be used instead of
                LogBack if required.</remark>
          </listitem>
          <listitem>
            <para>Groovy (for Groovy configuration file in LogBack)</para>
          </listitem>
        </itemizedlist></para>
      </listitem>
      
      <listitem>
        <para>Apache Tomcat 6.x or 7.x for testing in a web application or for trying the tutorial
          example. These are the application servers that have been tested on so far.</para>
      </listitem>
    </itemizedlist>
    
    <para> To go through the tutorial you will also need the Spring JPetStore sample application.
      This can downloaded as part of the Spring Framework download or from <link
        xlink:href="https://src.springframework.org/svn/spring-maintenance/trunk/samples/jpetstore/"
        >https://src.springframework.org/svn/spring-maintenance/trunk/samples/jpetstore/</link>
      .</para>
    
  </section>
  
  <section>
    <title>Install and Setup Eclipse</title>

    <para>Note that the project is distributed as source code within an Eclipse IDE project.
      TestDataCaptureJ requires the Eclipse IDE for the build once it has been configured for the
      application you want to test. Currently there is no build script for it.</para>

  <itemizedlist>
    <listitem>
      <para>Install the Eclipse IDE, this usually just involves unzipping the downloaded file to a location of your choosing.</para>
    </listitem>
    
    <listitem>
      <para>Install the ADJT plugin into Eclipse.</para>
    </listitem>
    
    <listitem>
      <para>Get the TestDataCaptureJ project, either from version control (using Git) or download
          testdatacapturej-xxx.zip and unzip it.</para>
    </listitem>
      <listitem>
        <para>Import TestDataCaptureJ into the Eclipse IDE as an existing project.</para>
      </listitem>
    
  </itemizedlist>
       
  </section>

  <section>
    <title>Setup a Test Web Application</title>

    <para>Currently has only been tested running web applications on Tomcat 6.x and JBoss AS 4.x so
      you will need to run your test application, i.e. the application that you want to capture test
      data on, on one of these app servers.</para>
    <remark>Please note that I am a developer, not a server admin expert, so while I've illustrated
      how to configure the server - it's not necessary the best way to do it.</remark>

      <itemizedlist>
        <listitem>
          <para>Install the app server, if required.</para>
        </listitem>
        
        <listitem>
          <para>Deploy your test web application to the app server and ensure that it runs properly,
          especially at the point that you want to capture the test data, e.g. at the end of the
          checkout process for a shopping application. Then stop the app server so that it can be
          configure and setup for TestDataCaptureJ.</para>
        </listitem>
        
        <listitem>
          <para>Configure the project to intercept the application at the point where you want to
          capture the test data. You will need access to the source code or the API for the test
          application to determine the best place for this. Also you will need to know about how to
          configure AspectJ pointcuts, refer the the AspectJ documentation for this.</para>
        <para>Edit <filename>conf/META-INF/aop.xml</filename> in the TestDataCaptureJ project in
          Eclipse by adding a &lt;concrete-aspect> tag to the xml file nested inside the
          &lt;aspects> tag. Following the template in the listing below, you need to:<itemizedlist>
            <listitem>
              <para>Create a valid Java class name for the 'name' attribute.</para>
            </listitem>
            <listitem>
              <para>Create an AspectJ pointcut expression for the 'pointcut' element named
                'loggedParamOperations', if the object you want to capture is a parameter of a
                method. If a parameter is not required then insert an empty pointcut expression,
                e.g. 'if(false)'.</para>
            </listitem>
            <listitem>
              <para>Create an AspectJ pointcut expression for the 'pointcut' element named
                'loggedReturnOperations', if the object you want to capture is a return value of a
                method. If a return value is not required then insert an empty pointcut expression,
                e.g. 'if(false)'.</para>
            </listitem>
          </itemizedlist></para>
        <para>Fragment of <filename>'conf/META-INF/aop.xml'</filename>:</para>
        <programlisting>&lt;aspectj>
&lt;aspects>
	&lt;aspect name="au.dom.dw.testdatacapturej.aspect.Trace"/>
	&lt;aspect name="au.dom.dw.testdatacapturej.aspect.TraceAdaptor"/>
.	
.
.
    &lt;!-- Template for your own tests -->
	&lt;concrete-aspect name="au.dom.dw.testdatacapturej.aspect.<emphasis role="bold"><emphasis role="italic">[Insert dummy class name]</emphasis></emphasis>"
                            extends="au.dom.dw.testdatacapturej.aspect.TraceAdaptor">
             &lt;pointcut name="loggedParamOperations" expression="execution(<emphasis role="bold"><emphasis role="italic">[Insert AspectJ pointcut expression]</emphasis></emphasis>)"/>
             &lt;pointcut name="loggedReturnOperations" expression="execution(<emphasis role="bold"><emphasis role="italic">[Insert AspectJ pointcut expression]</emphasis></emphasis>)"/>
    &lt;/concrete-aspect>
.
.
.
    
&lt;/aspects>
.
.
.
&lt;/aspectj></programlisting>
          <para>Have a look at the tutorial for an example.</para>
        </listitem>
      <listitem>
        <para>Configure the LogBack configuration file <filename>conf/logback.groovy</filename>.
          There is a choice whether to have every logged object intercepted by the AspectJ pointcuts
          logged to separate files, or to have all the logging sent to one file.</para>
        <para>In order to have the logging of each intercepted object sent to separate files, which
          is the default, configure the logger 'au.com.dw.testdatacapturej-trace' to use the 'SIFT'
          appender. Then configure the location that you want in the sift appender.</para>
        <programlisting>.
.
.      
appender("SIFT", GSiftingAppender) {
  discriminator(MDCBasedDiscriminator) {
    key="traceClass"
    defaultValue = "unknownValue"
  }
  sift {
    appender("FILE-${traceClass}", FileAppender) {
      file = "<emphasis role="bold"><emphasis role="italic">[Insert logging location]</emphasis></emphasis>/${traceClass}.java"
      encoder(PatternLayoutEncoder) {
        pattern = "// Generated %d%n%m%n"
      }
    }
  }
}
.
.
.
logger("au.com.dw.testdatacapturej-trace", INFO, ["SIFT"], false)
.
.
.</programlisting>
        <para>If you want all the test data logging to go to a single file, then configure the
          logger 'au.com.dw.testdatacapturej-trace' to use the 'FILE' appender instead. Then
          configure the location and log file name you want in the file appender.</para>
        <programlisting>.
.
.      
appender("FILE", FileAppender) {
  file = "<emphasis role="bold"><emphasis role="italic">[Insert logging location and file name]</emphasis></emphasis>"
  encoder(PatternLayoutEncoder) {
    pattern = "// Generated %d%n%m%n"
  }
}
.
.
.
logger("au.com.dw.testdatacapturej-trace", INFO, ["FILE"], false)
.
.
.</programlisting>
        <remark>Note that LogBack Groovy cofiguration file may be setup for a particular app server
          (i.e. Tomcat) and may need further configuration is another server is being used.</remark>
      </listitem>

        <listitem>
          <para>Configure the file <filename>conf/log4j.xml</filename> to set the name and location
          of the generated log file that you want. This log file should contain the test data you're
          after.</para>
        <para>Fragment of <filename>'conf/log4j.xml'</filename>:</para>
        <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">

&lt;!-- ===================================================================== -->
&lt;!--                                                                       -->
&lt;!--  Log4j Configuration                                                  -->
&lt;!--                                                                       -->
&lt;!-- ===================================================================== -->

&lt;log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/" debug="false">
.
.
.
        
    &lt;appender name="au.com.dw.testdatacapturej-file"
		class="org.apache.log4j.FileAppender">
		&lt;param name="file" value="<emphasis role="bold"><emphasis role="italic">[Insert logging location and file name]</emphasis></emphasis>" />
		&lt;param name="threshold" value="info" />
		&lt;param name="immediateFlush" value="true" />
		&lt;param name="append" value="false" />
		&lt;layout class="org.apache.log4j.PatternLayout">
			&lt;param name="ConversionPattern" value="// Generated %d{ABSOLUTE} %n%m%n" />
		&lt;/layout>
	&lt;/appender>
.
.
.</programlisting>
        <para>The changes involve editing the &lt;appender> tag named
          'au.com.dw.testdatacapturej-file'. Just change the value for the &lt;param> tag for 'file'
          to a valid path on your local machine. For example if it is setup in Tomcat to
          '${catalina.home}/logs/Test.java' so that the generated file will appear in the 'logs'
          directory in your Tomcat installation. Have a look at the tutorial for an example.</para>
	   </listitem>
	   
        <listitem>
          <para>Create the a jar file by exporting the TestDataCaptureJ project as a jar file with
          AspectJ support in Eclipse. You can call this jar file whatever you want, but for this
          documentation we'll just call in 'capture-xxx.jar' where 'xxx' is some sort of identifier
          or date.</para>
        <para>Right click on the TestDataCaptureJ project in the package explorer window in Eclipse,
          and select 'Export ...' from the context menu.<inlinemediaobject>
            <imageobject>
              <imagedata fileref="images/generate_jar-project.jpg"/>
            </imageobject>
          </inlinemediaobject></para>
        <figure>
          <title>generate_jar-menu.jpg</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/generate_jar-menu.jpg"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>From the Export dialog, select the 'JAR file with AspectJ support' option.<inlinemediaobject>
            <imageobject>
              <imagedata fileref="images/generate_jar-export-dialog.jpg"/>
            </imageobject>
          </inlinemediaobject></para>
        <para>Go through the export wizard using your own name and location for the generated
          capture jar file.<inlinemediaobject>
            <imageobject>
              <imagedata fileref="images/generate_jar-export-1.jpg"/>
            </imageobject>
          </inlinemediaobject>
          <remark>Hint: In the 'JAR Package Specification' dialog, you can edit the resources to
            export to only include the files needed for runtime, e.g. leave out source code, build
            files, etc.</remark>
          <inlinemediaobject>
            <imageobject>
              <imagedata fileref="images/generate_jar-export-2.jpg"/>
            </imageobject>
          </inlinemediaobject><inlinemediaobject>
            <imageobject>
              <imagedata fileref="images/generate_jar-export-3.jpg"/>
            </imageobject>
          </inlinemediaobject></para>
        </listitem>	 
       
               <listitem>
                 <para>Configure the app server to handle AspectJ load time weaving and copy the
          capture jar file you have generated, the AspectJ runtime jars, the log4j.xml file and the
          necessary dependencies to the app server. This step is specific to the app server you are
          using, see below.</para>


        </listitem>
  </itemizedlist>
    <section>
      <title>Setup for Tomcat 6.x, 7.x</title>
      <remark>Note: {TOMCAT_HOME} in this documentation refers to the location where you have
        installed Tomcat, and is NOT an environmental variable.</remark>
      <section>
        <title> AspectJ runtimes</title>
        <para>
          <itemizedlist>
            <listitem>
              <para>Copy the AspectJ runtime jars needed for load time weaving to {TOMCAT_HOME}/lib.
                These are aspectjrt.jar and aspectjweaver.jar.<inlinemediaobject>
                  <imageobject>
                    <imagedata fileref="images/tomcat-lib.jpg"/>
                  </imageobject>
                </inlinemediaobject></para>
            </listitem>
            <listitem>
              <para>Make the changes to catalina.bat in {TOMCAT_HOME}/bin so that the AspectJ
                load-time weaving will be done. </para>
              <para>
                <remark>Hint: It is a good idea to make a backup of catalina.bat in your Tomcat
                  installation before making changes to it.</remark>
              </para>
              <para>Fragment of <filename>'bin/catalina.bat'</filename> :</para>
              <programlisting>.
.
.
set ASPECTJ_WEAVING=-javaagent:%CATALINA_BASE%\lib\aspectjweaver.jar -Xmx1024m
set JAVA_OPTS=%JAVA_OPTS% %ASPECTJ_WEAVING%
.
.
.</programlisting>
              <para>The changes involve adding the ASPECTJ_WEAVING variable to the file, and then
                adding that variable to be included in the JAVA_OPTS variable. There is a section in
                  <filename>'bin/catalina.bat'</filename> where the JAVA_OPTS variable is set, so a
                good place to add our changes is at the end of this section. Note that the
                ASPECTJ_WEAVING variable must point to the location where you have copied
                aspectjweaver.jar to your Tomcat installation.</para>
              <para>An example of an edited file can be found in the TestGen project at
                  <filename>tutorial/tomcat/bin/catalina.bat</filename>, n. Note this this example
                file is from an installation of Tomcat 6.0.26, so may vary slightly from your copy
                of catalina.bat if you have installed a different version of Tomcat.</para>
            </listitem>
          </itemizedlist>
        </para>
      </section>
      
      <section>
        <title>Dependency files</title>
        <para>
          <itemizedlist>
            <listitem>
              <para>The dependency jars need to be in the classpath of the application that you are
                testing. They are located in the 'lib' directory of the Eclipse project. There are
                several ways of doing this in Tomcat:<itemizedlist>
                  <listitem>
                    <para>When a web application in war file format is first run in the
                      {TOMCAT_HOME}/webapps directory, it will be expanded into a new directory.
                      Underneath this web application directory, jar files can be copied to the
                      'WEB-INF/lib' directory.</para>
                  </listitem>
                  <listitem>
                    <para>If you do not want to alter the structure of the web application to be
                      tested, you can setup a shared library in Tomcat, for example create a new
                      directory at {TOMCAT_HOME}/shared/lib and configure it to be used as a shared
                      library directory. Note however this means the jar files there will be shared
                      by the other web applications as well.</para>
                    <remark>See the Tomcat documentation about setting up shared library
                      directories.</remark>
                  </listitem>
                </itemizedlist></para>
            </listitem>
            <listitem>
              <para>Copy the dependency jars to the location to be included in the web application classpath.<itemizedlist>
                  <listitem>
                    <para>The Apache commons jars are required.</para>
                  </listitem>
                  <listitem>
                    <para>Other jars may be optional, depending on your particular
                    requirements:</para>
                    <itemizedlist>
                      <listitem>
                        <para>if you use another logging library instead of LogBack, then the
                          LogBack jars can be left out (or if necessary, replaced by the jars of
                          your choice of logging library)</para>
                      </listitem>
                      <listitem>
                        <para>groovy-all-x.x.jar is only required for the Groovy configuration for
                          LogBack, if you don't use the Groovy configuration or use another logging
                          library instead of LogBack, then this can be left out.</para>
                      </listitem>
                    </itemizedlist>
                  </listitem>
                </itemizedlist></para>
            </listitem>
            <listitem>
              <para>Copy the capture jar that you have generated to the location to be included in
                the web application classpath, either in the web application or in the Tomcat shared
                  directory.<remark>Hint: you can just export the jar directly to this location when
                  you generate it without having to do this step.<inlinemediaobject>
                    <imageobject>
                      <imagedata fileref="images/tomcat-webapps-lib.jpg"/>
                    </imageobject>
                  </inlinemediaobject><inlinemediaobject>
                    <imageobject>
                      <imagedata fileref="images/tomcat-shared-lib.jpg"/>
                    </imageobject>
                  </inlinemediaobject></remark></para>
            </listitem>
          </itemizedlist>
        </para>
      </section>

      <section>
        <title>Logging framework</title>
        <para>The TestDataCaptureJ project currently uses LogBack as the logging framework to do the
          actual logging of the captured test data. The advantage of using LogBack is that it has a
          sift appender that allows each test data object to be logged to a separate file.</para>
        <itemizedlist>
          <listitem>
            <para>Copy the LogBack jars to the location to be included in the web application
              classpath (where the dependency jars were copied to). These are:<itemizedlist>
                <listitem>
                  <para>logback-core-xxx.jar</para>
                </listitem>
                <listitem>
                  <para>logback-classic-xxx.jar</para>
                </listitem>
                <listitem>
                  <para>slf4j-api-xxx.jar</para>
                </listitem>
                <listitem>
                  <para>groovy-all-xxx.jar</para>
                  <remark>Note that the Groovy jar is only required because the the LogBack
                    configuration is in Groovy format. If you decide to use the LogBack xml format
                    instead then the Groovy jar is no longer needed.</remark>
                </listitem>
              </itemizedlist></para>
          </listitem>
        </itemizedlist>
      </section>
      
    </section>

    <section>
      <title>Using Log4J as the Logging Framework (deprecated)</title>
      <para>Although TestDataCaptureJ uses LogBack as the logging framework, , it is still possible
        to use Log4J instead, although that is deprecated for this project so that it will not be
        used in future development. Should you want to use Log4J instead of LogBack, then make the
        following changes. Note however this means all the generated logging will go to a single
        file.</para>
      <para>Changes to the TestDataCaptureJ project in Eclipse : <itemizedlist>
          <listitem>
            <para>Copy the file <filename>tutorial/deprecated/log4j.xml</filename> to the 'conf'
              directory.</para>
          </listitem>
          <listitem>
            <para>Copy the file <filename>tutorial/deprecated/log4j-xxx.jar</filename> to the 'lib'
              directory.</para>
          </listitem>
          <listitem>
            <para>In the library page of the build path configuration, remove the LogBack jars and
              add the <filename>lib/log4j-xxx.jar</filename> instead.</para>
          </listitem>
          <listitem>
            <para>Optionally delete the LogBack jars from the 'lib' directory.</para>
          </listitem>
          <listitem>
            <para>Optionally delete the LogBack configuration file from the 'conf' directory.</para>
          </listitem>
          <listitem>
            <para>In the source code, change the import statements and logging code for the classes
              that utilized the logging framework. This means replacing the dependencies on slf4j
              with the log4j equivalents.</para>
            <para>Fragment of
                <filename>'src/au/com/dw/testdatacapturej/aspect/TraceAdaptor'</filename> using
              LogBack:</para>
            <programlisting>package au.com.dw.testdatacapturej.aspect;

import au.com.dw.testdatacapturej.log.LogHolder;
import au.com.dw.testdatacapturej.log.LoggingConstants;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.MDC;
.
.
.
public abstract aspect TraceAdaptor extends Trace {
	private Logger logger = LoggerFactory.getLogger(LoggingConstants.TRACE_LOGGER);
.
.
.</programlisting>
            <para>Fragment of
                <filename>'src/au/com/dw/testdatacapturej/aspect/TraceAdaptor'</filename> using
              Log4J:</para>
            <programlisting>package au.com.dw.testdatacapturej.aspect;

import au.com.dw.testdatacapturej.log.LogHolder;
import au.com.dw.testdatacapturej.log.LoggingConstants;
import org.apache.log4j.Logger;
.
.
.
public abstract aspect TraceAdaptor extends Trace {
	private Logger _logger = Logger.getLogger(LoggingConstants.TRACE_LOGGER);
.
.
.</programlisting>
          </listitem>
          <listitem>
            <para>Configure the file <filename>conf/log4j.xml</filename> to set the name and
              location of the generated log file that you want. This log file should contain the
              test data you're after.</para>
            <para>Fragment of <filename>'conf/log4j.xml'</filename>:</para>
            <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">

&lt;!-- ===================================================================== -->
&lt;!--                                                                       -->
&lt;!--  Log4j Configuration                                                  -->
&lt;!--                                                                       -->
&lt;!-- ===================================================================== -->

&lt;log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/" debug="false">
.
.
.
        
    &lt;appender name="au.com.dw.testdatacapturej-file"
		class="org.apache.log4j.FileAppender">
		&lt;param name="file" value="<emphasis role="bold"><emphasis role="italic">[Insert logging location and file name]</emphasis></emphasis>" />
		&lt;param name="threshold" value="info" />
		&lt;param name="immediateFlush" value="true" />
		&lt;param name="append" value="false" />
		&lt;layout class="org.apache.log4j.PatternLayout">
			&lt;param name="ConversionPattern" value="// Generated %d{ABSOLUTE} %n%m%n" />
		&lt;/layout>
	&lt;/appender>
.
.
.</programlisting>
            <para>The changes involve editing the &lt;appender> tag named
              'au.com.dw.testdatacapturej-file'. Just change the value for the &lt;param> tag for
              'file' to a valid path on your local machine.</para>
            <para>For example, in the tutorial, it is setup for use with Tomcat to
              '${catalina.home}/logs/TutorialTest.java' so that the generated file will appear in
              the 'logs' directory in your Tomcat installation.</para>
            <para>Fragment of <filename>'tutorial/deprecated/log4j.xml'</filename>:</para>
            <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">

&lt;!-- ===================================================================== -->
&lt;!--                                                                       -->
&lt;!--  Log4j Configuration                                                  -->
&lt;!--                                                                       -->
&lt;!-- ===================================================================== -->

&lt;log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/" debug="false">
.
.
.
        
    &lt;appender name="au.com.dw.testdatacapturej-file"
		class="org.apache.log4j.FileAppender">
		&lt;param name="file" value="${catalina.home}/logs/TutorialTest.java" />
		&lt;param name="threshold" value="info" />
		&lt;param name="immediateFlush" value="true" />
		&lt;param name="append" value="false" />
		&lt;layout class="org.apache.log4j.PatternLayout">
			&lt;param name="ConversionPattern" value="// Generated %d{ABSOLUTE} %n%m%n" />
		&lt;/layout>
	&lt;/appender>
.
.
.</programlisting>
          </listitem>
          <listitem>
            <para>Export the TestDataCaptureJ project as before.</para>
          </listitem>
        </itemizedlist></para>
      <para>Changes to the test web application:<itemizedlist>
          <listitem>
            <para>Copy the file 'log4j-xxx.jar' to the location to be included in the web
              application classpath (where the dependency jars were copied to).</para>
          </listitem>
          <listitem>
            <para>Alternatively if there is potential for conflict if the test web application is
              already using Log4J, then it is possible to copy the
                <filename>conf/log4j.xml</filename> file and the log4j-xxx.jar file to
              {TOMCAT_HOME}/lib instead.<inlinemediaobject>
                <imageobject>
                  <imagedata fileref="images/tomcat-lib-log4j.jpg"/>
                </imageobject>
              </inlinemediaobject></para>
          </listitem>
        </itemizedlist></para>
    </section>
    
  </section>
  
    <section>
      <title>Alternative - Build with the Application</title>
      <para>Here we are using load time weaving for the aspects since that means no change is required to the application that you want to generate the test data for.</para>
      <para>However you can also do compile time weaving by including the TestDataCaptureJ jar in the build process for the application, and then just run the application. In this case the TestDataCaptureJ jar (and its dependencies) would need to be in the aspectpath of the AspectJ compiler.</para>
    </section>
    
    <section>
      <title>Next:</title>
      <para><link xlink:href="run.html">Running the application</link></para>
    </section>

</article>
