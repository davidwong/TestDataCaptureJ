<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" type="xml"?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
  <title>TestDataCaptureJ: Tutorial</title>
  
  <section>
    <title>Setup the Tutorial Application</title>
    <para>This tutorial will use the TestDataCaptureJ tool on a web application to demonstrate its
      usage, using the JPetStore sample application from the Spring Framework 2.x . It will be done
      in 3 stages to show some of the tool configuration options, as well as some of the limitations
      of the tool. The instructions are for following the tutorial in a windows environment.</para>
    <itemizedlist>
      <listitem>
        <para>Install and setup the TestDataCaptureJ tool in the Eclipse IDE as per the setup
          instructions.</para>
      </listitem>
      <listitem>
        <para>Install and setup Tomcat 6.x as the app server, in the tutorial instructions
          {TOMCAT_HOME} will refer to the location where Tomcat is installed. It is assumed that you
          will already have a compatible version of Java installed on your server machine and have
          the appropriate environment setup for it, e.g. JAVA_HOME.</para>
      </listitem>
      <listitem>
        <para>Get a copy of the Spring JPetStore sample application, it should be included in the
          Spring Framework 2.x download <link xlink:href="http://www.springsource.org/download"
            >http://www.springsource.org/download</link>.</para>
      </listitem>
      <listitem>
        <para>Alternatively if you have a version of the Spring Framework that does not include the
          JPetStore sample, you can use Subversion to export a copy from the Spring Framework
          version control repository.  Note that you have to put the JPetStore folder under the
          samples folder of a Spring Framework 2.x distribution for the build files to work.</para>
        <para><link xlink:href="https://src.springframework.org/svn/spring-maintenance/trunk/samples/jpetstore/">https://src.springframework.org/svn/spring-maintenance/trunk/samples/jpetstore/</link></para>
        <programlisting>D:\>svn export https://src.springframework.org/svn/spring-maintenance/trunk/samples/jpetstore/ D:\tutorial\spring-framework-2.5.6.SEC01\samples\jpetstore
A    D:\tutorial\jpetstore
A    D:\tutorial\jpetstore\build.bat
.
.
.
A    D:\tutorial\jpetstore\warfile.bat
Exported revision 17168.</programlisting>
      </listitem>
      <listitem>
        <para>Install whatever build tools are required to build the JPetStore application war file,
          e.g. Ant. Follow the instructions in the readme.txt file for the JPetStore project as they
          may vary depending on the version of the JPetStore sample that was downloaded.</para>
      </listitem>
      <listitem>
        <para>Build the JPetStore application war file, following the instructions in the readme.txt
          file for the JPetStore project.</para>
      </listitem>
      <listitem>
        <para>Deploy the JPetStore to the Tomcat server, just need to copy the war file in the
          target directory to the webapps directory in Tomcat. Before deploying the war file, rename
          it to 'jpetstore.war' to make it easier to manage if it is called something more
          complicated.</para>
      </listitem>
      <listitem>
        <para>Setup and start the JPetStore database of your choice in the db directory, the HSQLDB
          instance is probably the easiest one to use. Once again follow the instructions in the
          readme.txt file for the JPetStore project.</para>
        <programlisting>D:\tutorial\spring-framework-2.5.6.SEC01\samples\jpetstore\db\hsqldb>server.bat
.
.
.
[Server@54c4ad]: Database [index=0, id=0, db=file:D:\tutorial\jpetstore\db
\hsqldb\jpetstore, alias=] opened sucessfully in 2438 ms.
[Server@54c4ad]: Startup sequence completed in 4047 ms.
[Server@54c4ad]: 2010-08-12 09:45:54.250 HSQLDB server 1.8.0 is online
[Server@54c4ad]: To close normally, connect and execute SHUTDOWN SQL
[Server@54c4ad]: From command line, use [Ctrl]+[C] to abort abruptly</programlisting>
      </listitem>
      <listitem>
        <para>Start the Tomcat server and check the console log to ensure that it starts up
          successfully.</para>
      </listitem>
      <listitem>
        <para>Run the JPetStore app, go through the process of buying some pets and going through
          the checkout process to make sure it runs successfully.<link
            xlink:href="http://localhost:8080/jpetstore/">http://localhost:8080/jpetstore/</link>
          (replace localhost with your server name if you are not running Tomcat on your local
          machine)</para>  
        <para>       
        <inlinemediaobject>
            <imageobject>
              <imagedata fileref="images/tutorial_jpetstore-url.jpg"/>
            </imageobject>
        </inlinemediaobject>
        </para> 
      </listitem>
      <listitem>
        <para>Stop the Tomcat server.</para>
      </listitem>
    </itemizedlist>
  </section>
  
  <section>
    <title>Setup TestDataCaptureJ for the Tutorial</title>
    <para>Now we need to setup the TestDataCaptureJ tool for the JPetStore application.</para>
    <para>The tutorial will try to capture the data for the shopping cart containing the pets that
      have been added to the cart, so that the data can be re-used as input to unit test cases that
      test the creation of an order from the shopping cart items.</para>
    <itemizedlist>
      <listitem>
        <para>In the file <filename>org.springframework.samples.jpetstore.domain.Order.java</filename> there is a method that creates an order from the contents of
          the shopping cart. The initOrder() method has the cart as one of its parameters, and this
          would be a good place to capture the cart data as it should contain all the necessary
          information that we need as this stage of the checkout process.</para>
      </listitem>
      <listitem>
        <para>Edit <filename>conf/META-INF/aop.xml</filename> in the TestDataCaptureJ project in
          Eclipse to setup the AspectJ pointcut to intercept the parameters of initOrder()
          method.</para>
        <para>Fragment of <filename>'conf/META-INF/aop.xml'</filename>:</para>
        <programlisting>&lt;aspectj>
&lt;aspects>
	&lt;aspect name="au.dom.dw.testdatacapturej.aspect.Trace"/>
	&lt;aspect name="au.dom.dw.testdatacapturej.aspect.TraceAdaptor"/>
.	
.
.
    &lt;!-- For use in the JPetStore tutorial -->
	&lt;concrete-aspect name="au.dom.dw.testdatacapturej.aspect.TestSpringPetStoreTrace"
                            extends="au.dom.dw.testdatacapturej.aspect.TraceAdaptor">
             &lt;pointcut name="loggedParamOperations" expression="execution(* org.springframework.samples.jpetstore.*.Order.initOrder(..))"/>
             &lt;pointcut name="loggedReturnOperations" expression="execution(* dummy.noSuchMethod(..))"/>
    &lt;/concrete-aspect>
    
&lt;/aspects>
.
.
.
&lt;/aspectj></programlisting>
       <para>The changes involve adding a &lt;concrete-aspect> tag to the xml file nested inside the
          &lt;aspects> tag.<itemizedlist>
            <listitem>
              <para>The 'name' attribute can be any valid java class name you choose, here we have
                used 'au.dom.dw.testdatacapturej.aspect.TestSpringPetStoreTrace'.</para>
            </listitem>
            <listitem>
              <para>The 'extends attribute must be 'au.dom.dw.testdatacapturej.aspect.TraceAdaptor'
                since we want our aspect to inherit from that class.</para>
            </listitem>
            <listitem>
              <para>There are 2 pointcuts that need to be defined, since
                  <classname>au.dom.dw.testdatacapturej.aspect.TraceAdaptor</classname> has 2
                abstract pointcuts that must be implemented in order to create a concrete aspect
                class. One pointcut is for intercepting data objects that are parameters for a
                method, and the other is for intercepting pointcuts that are return values of a
                method.</para>
            </listitem>
            <listitem>
              <para>The &lt;pointcut> tag for 'loggedParamOperations' will have a pointcut
                expression for the initOrder() method in
                  <filename>org.springframework.samples.jpetstore.domain.Order.java</filename> that
                we want to intercept. Because the pointcut will be used in a before advice, it will
                capture the parameters for initOrder().</para>
              <para>This pointcut was decided upon after looking through the JPetStore source code
                to find a point where the shopping cart in the checkout process would contain all
                the data that was required, and would be available as either a parameter or a return
                value of some method.</para>
            </listitem>
            <listitem>
              <para>The &lt;pointcut> tag for 'loggedReturnOperations' is not used since we want to
                intercept a parameter in this tutorial rather than a return value. Since the tag
                needs to be defined to make the aspect class concrete, just choose a dummy pointcut
                expression that points to a method that doesn't exist.</para>
            </listitem>
          </itemizedlist></para>
        <para>An example of an edited file can be found in the TestDataCaptureJ project at
            <filename>tutorial/conf/META-INF/aop.xml</filename>.</para>
      </listitem>
      <listitem>
        <para>Configure the <filename>conf/log4j.xml</filename> file for the name and location of the generated file that we
          want.</para>
        <para>Fragment of <filename>'conf/log4j.xml'</filename>:</para>
        <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">

&lt;!-- ===================================================================== -->
&lt;!--                                                                       -->
&lt;!--  Log4j Configuration                                                  -->
&lt;!--                                                                       -->
&lt;!-- ===================================================================== -->

&lt;log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/" debug="false">
.
.
.
        
    &lt;appender name="au.com.dw.testdatacapturej-file"
		class="org.apache.log4j.FileAppender">
		&lt;param name="file" value="${catalina.home}/logs/TutorialTest1.java" />
		&lt;param name="threshold" value="info" />
		&lt;param name="immediateFlush" value="true" />
		&lt;param name="append" value="false" />
		&lt;layout class="org.apache.log4j.PatternLayout">
			&lt;param name="ConversionPattern" value="// Generated %d{ABSOLUTE} %n%m%n" />
		&lt;/layout>
	&lt;/appender>
.
.
.</programlisting>
        <para>The changes involve editing the &lt;appender> tag named
          'au.com.dw.testdatacapturej-file'. Just change the value for the &lt;param> tag for 'file'
          to a valid path on your local machine. In this example it has been set to
          '${catalina.home}/logs/TutorialTest.java' so that the generated file will appear in the
          'logs' directory in your Tomcat installation.</para>
        <para>An example of an edited file can be found in the TestDataCaptureJ project at
            <filename>tutorial/conf/log4j.xml</filename>.</para>
      </listitem>
      <listitem>
        <para>Copy the log4j.xml file and the log4j-xxx.jar file to {TOMCAT_HOME}/lib, since we
          require Log4J to do the actual logging of the test data.</para>
      </listitem>
      <listitem>
        <para>Copy the AspectJ runtime jars needed for load time weaving to {TOMCAT_HOME}/lib. These
          are aspectjrt.jar and aspectjweaver.jar.</para>
      </listitem>
      <listitem>
        <para>Create a shared library directory in Tomcat at {TOMCAT_HOME}/shared/lib.</para>
      </listitem>
      <listitem>
        <para>Copy the dependency jars to the shared library directory at {TOMCAT_HOME}/shared/lib.
          These are:<itemizedlist>
            <listitem>
              <para>commons-collections-xxx.jar</para>
            </listitem>
            <listitem>
              <para>commons-configuration-xxx.jar</para>
            </listitem>
            <listitem>
              <para>commons-lang-xxx.jar</para>
            </listitem>
            <listitem>
              <para>commons-logging.jar</para>
            </listitem>
          </itemizedlist></para>
      </listitem>
      <listitem>
        <para>In the TestDataCaptureJ project in Eclipse, export the project as a jar with AspectJ
          support to {TOMCAT_HOME}/shared/lib.</para>
        <para>IMAGES HERE</para>
      </listitem>
      <listitem>
        <para>Make the changes to catalina.bat in {TOMCAT_HOME}/bin so that the AspectJ load-time
          weaving will be done.</para>
        <para><remark>It is a good idea to make a backup of catalina.bat in your Tomcat installation before making changes to it.</remark></para>
        <para>Fragment of <filename>'bin/catalina.bat'</filename> :</para>
        <programlisting>.
.
.
set ASPECTJ_WEAVING=-javaagent:%CATALINA_BASE%\lib\aspectjweaver.jar -Xmx1024m
set JAVA_OPTS=%JAVA_OPTS% %ASPECTJ_WEAVING%
.
.
.</programlisting>
        <para>The changes involve adding the ASPECTJ_WEAVING variable to the file, and then adding
          that variable to be included in the JAVA_OPTS variable. There is a section in
            <filename>'bin/catalina.bat'</filename> where the JAVA_OPTS variable is set, so a good
          place to add our changes is at the end of this section. Note that the ASPECTJ_WEAVING
          variable must point to the location where you have copied aspectjweaver.jar to your Tomcat
          installation.</para>
        <para>An example of an edited file can be found in the TestDataCaptureJ project at
            <filename>tutorial/tomcat/bin/catalina.bat</filename>, n. Note this this example file is
          from an installation of Tomcat 6.0.26, so may vary slightly from your copy of catalina.bat
          if you have installed a different version of Tomcat.</para>
      </listitem>
    </itemizedlist>
  </section>
  
  <section>
    <title>The Tutorial Application - 1st Run</title>
    <para>Start the app server, check the log or console output to make sure it starts without
      errors. Then run the JPetStore application, what we want to do is to buy some pets and then go
      through the checkout process.</para>
    <figure>
      <title>tutorial_jpetstore-basket.jpg</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/tutorial_jpetstore-basket.jpg"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>At the login page just use the default application values.</para>
    <figure>
      <title>tutorial_jpetstore-login.jpg</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/tutorial_jpetstore-login.jpg"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>At the stage where the order is submitted and created during the checkout, the point at
      which we have setup to capture the test data at Order.initOrder(..) should have been
      run.</para>
    <figure>
      <title>tutorial_jpetstore-order-submitted.jpg</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/tutorial_jpetstore-order-submitted.jpg"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Now check that the log file for the test data has been created and contains the java code
      to re-create the Cart object.</para>
    <para>This is a sample from <filename>'tutorial/logs/TutorialTest1.java'</filename> :</para>
    <programlisting>// Generated 12:52:08,031 
// org.springframework.samples.jpetstore.domain.Order.initOrder
public org.springframework.samples.jpetstore.domain.Account createParam1Account_org_springframework_samples_jpetstore_domain_Order_initOrder() {

org.springframework.samples.jpetstore.domain.Account account0 = new org.springframework.samples.jpetstore.domain.Account();
account0.setUsername("j2ee");
account0.setPassword(null);
account0.setEmail("yourname@yourdomain.com");
account0.setFirstName("ABC");
account0.setLastName("XYX");
account0.setStatus("OK");
account0.setAddress1("901 San Antonio Road");
account0.setAddress2("MS UCUP02-206");
account0.setCity("Palo Alto");
account0.setState("CA");
account0.setZip("94303");
account0.setCountry("USA");
account0.setPhone("555-555-5555");
account0.setFavouriteCategoryId("DOGS");
account0.setLanguagePreference("english");
account0.setListOption(true);
account0.setBannerOption(true);
account0.setBannerName("&lt;image src=\"../images/banner_dogs.gif\">");

return account0;
}

.
.
.</programlisting>
    <para>Now we can try out the code that we have generated. The tutorial will use Eclipse to run
      unit tests on the JPetStore application, which will require the Maven plugin for Eclipse to
      have been installed.</para>
    <para>You can also run unit tests with Maven instead, but that will require editing the pom.xml
      file to configure the test goal and include the test files. This is left as an exercise for
      the reader if you do not want to use Eclipse.<itemizedlist>
        <listitem>
          <para>Import the JPetStore project as an existing java project into Eclipse.</para>
        </listitem>
        <listitem>
          <para>Create a directory to store the unit test files at LOCATION, and configure the build
            path for the JPetStore project to include the test directory as a source folder.</para>
        </listitem>
        <listitem>
          <para>Create a dummy class file, containing an empty class, at the correct location in the
            test directory.</para>
        </listitem>
        <listitem>
          <para>Copy and paste the contents of the log file, NAME, containing the generated code
            into the dummy class.</para>
          <para>CODE HERE</para>
        </listitem>
        <listitem>
          <para>When Eclipse tries to build the code for the dummy file (or if you have autobuild
            configured for the project), then you will see that it will not compile and has some
            errors.</para>
        </listitem>
        <listitem>
          <para>The first error will occur at this line:</para>
          <para>CODE HERE</para>
          <para>If we look at the JPetStore source, we can see the problem in Cart.java in the xxx
            is created using a wrapper method instead of new().</para>
          <para>CODE HERE</para>
          <para>This is one of the limitations of the TestGen tool, currently there is no way around
            this so we will have to do a manual edit in the dummy class file to correct this.</para>
          <para>CODE HERE</para>
        </listitem>
        <listitem>
          <para>The next error is at this line:</para>
          <para>CODE HERE</para>
          <para>We will fix this later, so for now just comment out the code so that the dummy class
            will compile.</para>
        </listitem>
        <listitem>
          <para>The last error occurs here:</para>
          <para>CODE HERE</para>
          <para>This will also be fixed later, so once again comment out the error lines. Now the
            dumy class should compile properly.</para>
        </listitem>
        <listitem>
          <para>Create a unit test that uses the dummy class to test the data that was generated.
            This is TutorialTest.java at LOCATION.</para>
          <para>CODE HERE</para>
          <para>We are using JUnit 4.x for the unit testing as that comes with Eclipse, but you can
            also use TestNG if you have the TestNG plugin installed in Eclipse.</para>
        </listitem>
        <listitem>
          <para>Run the unit test, NAME.</para>
          <para>Although the test case should run using the generated code, we have had to comment
            out some lines that did not compile for various reasons. Now we can try to fix some of
            these issues.</para>
        </listitem>
      </itemizedlist></para>
  </section>
  
  <section>
    <title>The Tutorial Application - 2nd Run</title>
    <para>The second error we encountered was with the java.util.Date field. If we look at the
      source or the API for java.util.Date, then we can see that the reason the error was caused
      problems are:</para>
    <itemizedlist>
      <listitem>
        <para>The fields NAMES do not have setter methods, and the NAME field is actually meant to
          be transient. Therefore the generated setter methods for these fields do not actually
          exist.</para>
        <para>CODE HERE</para>
      </listitem>
      <listitem>
        <para>The no-argument constructor for java.util.Date will actually set the internal state to
          the current date and time at which the object was created, instead of the time in the NAME
          field.</para>
      </listitem>
    </itemizedlist>
    <para>To get around these problems we need to do some configuration for the TestDataCaptureJ
      tool.</para>
    <para>EXPLANATION HERE</para>
    <para>Now we can run the tutorial application again with the updated configuration.
      <itemizedlist>
        <listitem>
          <para>Stop the Tomcat server if it is still running.</para>
        </listitem>
        <listitem>
          <para>Export the TestDataCaptureJ project as a jar with AspectJ support to
            {TOMCAT_HOME}/shared/lib, over-writing the jar exported before from the previous
            run.</para>
        </listitem>
        <listitem>
          <para>Start the Tomcat server.</para>
        </listitem>
        <listitem>
          <para>Run the JPetStore as before, buying some pets and then going through the checkout
            process.</para>
        </listitem>
        <listitem>
          <para>Create another dummy class file, containing an empty class, at the correct location
            in the test directory.</para>
        </listitem>
        <listitem>
          <para>Copy and paste the contents of the log file, NAME, containing the generated code
            into the new dummy class.</para>
        </listitem>
        <listitem>
          <para>Once again the dummy file will not compile properly, so we will need to do some
            manual editing again.</para>
        </listitem>
        <listitem>
          <para>The first error will occur at this line:</para>
          <para>CODE HERE</para>
          <para>This is the error we have encountered before for the NAME field, so do the manual
            edit as before.</para>
          <para>CODE HERE</para>
        </listitem>
        <listitem>
          <para>The last error occurs here:</para>
          <para>CODE HERE</para>
          <para>This is also the same problem that we have encountered before, and will be fixed
            later so just comment it out as before</para>
          <para>CODE HERE</para>
        </listitem>
        <listitem>
          <para>The dummy class should now compile properly, notice that the previous error we had
            with the java.util.Date field doesn't exist. The configuration for TestGen has fixed
            this problem so that the java.util.Date object is created properly:</para>
          <para>CODE HERE</para>
        </listitem>
        <listitem>
          <para>Edit your unit test case to use the new dummy file and run it.</para>
          <para>Now we will try to fix the error with NAME.</para>
        </listitem>
      </itemizedlist>
    </para>
  </section>
  
  <section>
    <title>The Tutorial Application - 3rd Run</title>
    <para>The second error we encountered was with the NAME field. If we look at the JPetStore
      source, then we can see that the problem is that the NAME field in the NAME class does not
      have a setter method.</para>
    <para>In this case, we need to examine the source code to see if we actual need this field for
      our unit testing. It seems that the NAME class contains some field which are not required for
      creating an order, but are purely for the web navigation.</para>
    <para>CODE HERE AND MORE EXPLANATION</para>
    <para>Hence we can do some configuration for TestGen so that a setter method is not generated
      for the NAME field.</para>
    <para>EXPLANATION HERE</para>
    <para>Now we can run the tutorial application again with the updated configuration. <itemizedlist>
        <listitem>
          <para>Stop the Tomcat server if it is still running.</para>
        </listitem>
        <listitem>
          <para>Export the TestDataCaptureJ project as a jar with AspectJ support to
            {TOMCAT_HOME}/shared/lib.</para>
        </listitem>
        <listitem>
          <para>Start the Tomcat server.</para>
        </listitem>
        <listitem>
          <para>Run the JPetStore as before, buying some pets and then going through the checkout
            process.</para>
        </listitem>
        <listitem>
          <para>Create another dummy class file, containing an empty class, at the correct location
            in the test directory.</para>
        </listitem>
        <listitem>
          <para>Copy and paste the contents of the log file, NAME, containing the generated code
            into the new dummy class.</para>
        </listitem>
        <listitem>
          <para>Once again the dummy file will not compile properly, so we will need to do some
            manual editing again.</para>
        </listitem>
        <listitem>
          <para>The first error will occur at this line:</para>
          <para>CODE HERE</para>
          <para>This is the error we have encountered before for the NAME field, so do the manual
            edit as before.</para>
          <para>CODE HERE</para>
        </listitem>
        <listitem>
          <para>The dummy class should now compile properly, notice that the previous error we had
            with the NAME field doesn't exist. The configuration for TestGen has fixed this problem
            so that the setter method for the NAME field has not been generated.</para>
          <para>CODE HERE</para>
        </listitem>
        <listitem>
          <para>Edit your unit test case to use the new dummy file and run it.</para>
          <para>Unfortunately there is currently no workaround with the error with the NAME field,
            so it will require some manual editing each time the test data is generated. However if
            you need to generated lots of test data going through the checkout process with
            different combinations of pets in the shopping cart, at least TestGen has done most of
            the work for you.</para>
        </listitem>
      </itemizedlist>
    </para>
  </section>
  
</article>
